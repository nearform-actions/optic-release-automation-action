name: 'Auto Publish'

description: 'Automatically publish to NPM and create Github release'

inputs:
  github-token:
    description: "Your Github token, it's already available to your Github action"
    required: true
  npm-token:
    description: 'Your Npm Publish token, if you do not wish to publish to Npm, skip this'
    required: false
  build-command:
    description: 'The bash command to execute after the version bump and before opening the PR'
    required: false
  optic-url:
    description: 'URL if you have a custom application that serves OTP'
    required: false
    default: 'https://optic-zf3votdk5a-ew.a.run.app/api/generate/'
  optic-token:
    description: 'Your Optic token. You can add your Npm secret to the Optic app, generate a new token and pass it to this input. Required only if you want to pubish to Npm and have MFA enabled for your account'
    required: false
  actor-name:
    description: 'The name you want to see in the new release commit.'
    required: false
    default: '${{ github.actor }}'
  actor-email:
    description: 'The email you want to see in the new release commit'
    required: false
    default: 'actions@users.noreply.github.com'
  semver:
    description: 'The semver to use for this new release'
    required: true
    default: 'patch'
  npm-tag:
    description: 'If you want to release to the Npm with a custom tag, pass it here'
    required: false
    default: 'latest'
  api-url:
    description: 'Url of the API where the application is running'
    required: false
    default: 'https://optic-release-automation-ocrlhra4va-ue.a.run.app/'
  sync-semver-tags:
    description: 'If you want to keep the major and minor versions tag synced to the latest appropriate commit'
    required: false
    default: 'false'
  commit-message:
    description: 'The commit message template. The keyword "{version}" will be replaced with the new version'
    required: false
    default: 'Release {version}'
  revert-commit-after-failure:
    description: 'If the release fails while publishing to NPM and to GitHub, setting this flag to "true", will revert the release commit. When using this flag, make sure the action is able to push directly to the main branch'
    required: false
    type: boolean
    default: 'false'
  notify-linked-issues:
    description: 'If the flag is set to "true", a comment will be posted on each issue that is linked to the pull requests included in each release. The default setting is "true".'
    required: false
    type: boolean
    default: 'true'
  artifact-path:
    description: 'If this property is populated, the folder specified here will be used as the artifact to zip and attach to the release.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout the fresh project
      uses: actions/checkout@v3

    - name: Configure git
      run: |
        git config --global user.email "${{ inputs.actor-email }}"
        git config --global user.name "${{ inputs.actor-name }}"
      shell: 'bash'

    - name: Version bump
      id: version-bump
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        npm version --no-git-tag-version ${{ inputs.semver }}
        echo "::set-output name=PACKAGE_VERSION::$(echo $(node -p "require('./package.json').version"))"
      shell: 'bash'

    - name: Build the package
      if: ${{ inputs.build-command }}
      run: |
        node -v
        npm -v
        ${{ inputs.build-command }}
      shell: 'bash'

    - name: Commit and open PR
      uses: actions/github-script@v6
      if: ${{ github.event_name == 'workflow_dispatch' }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const script = require('${{ github.action_path }}/dist/index.js')
          await script({ github, context, inputs: ${{ toJSON(inputs) }}, packageVersion: "${{ steps.version-bump.outputs.PACKAGE_VERSION }}" })

    - name: Release the package
      uses: actions/github-script@v6
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const script = require('${{ github.action_path }}/dist/index.js')
          await script({ github, context, inputs: ${{ toJSON(inputs) }} })
