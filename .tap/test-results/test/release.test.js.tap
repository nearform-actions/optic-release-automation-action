TAP version 14
# Subtest: Should delete the release if the pr is not merged
    1..0
ok 1 - Should delete the release if the pr is not merged # time=118.898ms

# Subtest: Should delete the release even if deleting the branch failed and should not fail
    1..0
ok 2 - Should delete the release even if deleting the branch failed and should not fail # time=10.939ms

# Subtest: Should log an error if deleting the release fails
    1..0
ok 3 - Should log an error if deleting the release fails # time=8.658ms

# Subtest: Should log and exit if both the release and the branch fail
    1..0
ok 4 - Should log and exit if both the release and the branch fail # time=8.789ms

# Subtest: Should publish to npm without optic
    1..0
ok 5 - Should publish to npm without optic # time=8.476ms

# Subtest: Should publish with provenance if flag set and conditions met
    ok 1 - not failed
    ok 2 - publish called
    1..2
ok 6 - Should publish with provenance if flag set and conditions met # time=10.006ms

# Subtest: Aborts publish with provenance if NPM version too old
    1..0
ok 7 - Aborts publish with provenance if NPM version too old # time=10.145ms

# Subtest: Aborts publish with provenance if missing permission
    1..0
ok 8 - Aborts publish with provenance if missing permission # time=8.407ms

# Subtest: Should publish with --access public if flag set
    ok 1 - did not set failed
    ok 2 - called publishToNpm
    1..2
ok 9 - Should publish with --access public if flag set # time=7.309ms

# Subtest: Should publish with --access restricted if flag set
    ok 1 - did not set failed
    ok 2 - called publishToNpm
    1..2
ok 10 - Should publish with --access restricted if flag set # time=8.019ms

# Subtest: Should disallow unsupported --access flag
    1..0
ok 11 - Should disallow unsupported --access flag # time=8.961ms

# Subtest: Should publish with --access public and provenance if unscoped and unpublished
    ok 1 - did not set failed
    ok 2 - called publishToNpm
    1..2
ok 12 - Should publish with --access public and provenance if unscoped and unpublished # time=6.459ms

# Subtest: Should not override access restricted with provenance while unscoped and unpublished
    ok 1 - did not set failed
    ok 2 - called publishToNpm
    1..2
ok 13 - Should not override access restricted with provenance while unscoped and unpublished # time=8.564ms

# Subtest: Should publish with provenance and not add access when scoped and unpublished
    ok 1 - did not set failed
    ok 2 - called publishToNpm
    1..2
ok 14 - Should publish with provenance and not add access when scoped and unpublished # time=7.422ms

# Subtest: Should publish with provenance and not add access when unscoped and published
    ok 1 - did not set failed
    ok 2 - called publishToNpm
    1..2
ok 15 - Should publish with provenance and not add access when unscoped and published # time=9.326ms

# Subtest: Should not publish to npm if there is no npm token
    1..0
ok 16 - Should not publish to npm if there is no npm token # time=10.747ms

# Subtest: Should publish to npm with optic
    1..0
ok 17 - Should publish to npm with optic # time=7.612ms

# Subtest: Should tag versions
    1..0
ok 18 - Should tag versions # time=10.311ms

# Subtest: Should call the release method
    1..0
ok 19 - Should call the release method # time=8.519ms

# Subtest: Should call the release method with the prerelease flag if the release is a prerelease
    1..0
ok 20 - Should call the release method with the prerelease flag if the release is a prerelease # time=7.905ms

# Subtest: Should NOT call the release method if the pr wasn't merged
    1..0
ok 21 - Should NOT call the release method if the pr wasn't merged # time=11.774ms

# Subtest: Should NOT use npm if the pr wasn't merged
    1..0
ok 22 - Should NOT use npm if the pr wasn't merged # time=9.192ms

# Subtest: Should NOT tag version in git if the pr wasn't merged
    1..0
ok 23 - Should NOT tag version in git if the pr wasn't merged # time=6.855ms

# Subtest: Should not do anything if the user is not optic-release-automation[bot]
    1..0
ok 24 - Should not do anything if the user is not optic-release-automation[bot] # time=7.122ms

# Subtest: Should fail if the release metadata is incorrect
    1..0
ok 25 - Should fail if the release metadata is incorrect # time=7.981ms

# Subtest: Should call core.setFailed if the tagging the version in git fails
    1..0
ok 26 - Should call core.setFailed if the tagging the version in git fails # time=7.174ms

# Subtest: Should call core.setFailed if the release fails
    1..0
ok 27 - Should call core.setFailed if the release fails # time=6.524ms

# Subtest: Should call core.setFailed but not revert the commit when publish to npm fails
    1..0
ok 28 - Should call core.setFailed but not revert the commit when publish to npm fails # time=6.096ms

# Subtest: Should call core.setFailed and revert the commit when publish to npm fails
    1..0
ok 29 - Should call core.setFailed and revert the commit when publish to npm fails # time=5.701ms

# Subtest: Should tag the major, minor & patch correctly for 0
    1..0
ok 30 - Should tag the major, minor & patch correctly for 0 # time=6.336ms

# Subtest: Should tag the major, minor & patch correctly
    1..0
ok 31 - Should tag the major, minor & patch correctly # time=7.722ms

# Subtest: Should delete the release branch ALWAYS when the PR is closed
    1..0
ok 32 - Should delete the release branch ALWAYS when the PR is closed # time=5.649ms

# Subtest: Should NOT delete the release branch if the PR is not closed
    1..0
ok 33 - Should NOT delete the release branch if the PR is not closed # time=6.689ms

# Subtest: Should call notifyIssues function correctly when feature is enabled
    1..0
ok 34 - Should call notifyIssues function correctly when feature is enabled # time=6.325ms

# Subtest: Should not call notifyIssues function when feature is disabled
    1..0
ok 35 - Should not call notifyIssues function when feature is disabled # time=5.417ms

# Subtest: Should not reject when notifyIssues fails
    ok 1 - expected to resolve
    1..1
ok 36 - Should not reject when notifyIssues fails # time=11.292ms

# Subtest: Should fail when getting draft release fails
    1..0
ok 37 - Should fail when getting draft release fails # time=5.2ms

# Subtest: Should fail when release is not found
    1..0
ok 38 - Should fail when release is not found # time=5.37ms

# Subtest: Should not fail when release is not a draft
    1..0
ok 39 - Should not fail when release is not a draft # time=5.127ms

1..39
